\ TODO doc

\ This is partially a staging ground for new primitives, since it's easier to
\ implement them here than in rust.

NoMatch: == !
Has: ? < p#
In: ~Has
HasAny: `In \>:
AnyIn: ~HasAny

less lessAll: _== in '{P #: (`X !)}

Cut1: { y? ->is '{|i;j| x $ i # (j-i)} (is$1,(y#)) }
Cut_2: { 0,(y?->is+1) '(X $ P # ~-) (is,(y#)) }

\ We need p(#0) because [] and "" don't match (maybe they should)
split splitAny: _== in '{P Cut_2 `X Less p(#0)}

Split: {x = y \:+ GroupIndices }

Get: {x GetLine->a#(a#-1)}

\ x .(100 Times _{do_thing})
Times: {|n;f| { if(y=0; x; x F Rec (y-1)) } n}

\ Row lengths must match x@0#
XposeF: {x@0#/ `{|i|x`@i Y}}
Xpose: XposeF _{x}

\ Post-multiply: kxm MulMM nxk -> nxm
MulMM: ~{x `{|r| y XposeF _(* r \+)}}

MulMV: {x MulMM [y]}
MulVM: {[x] MulMM y}
